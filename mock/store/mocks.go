// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/oasishub-indexer/store (interfaces: DatabaseStore,SyncablesStore,ReportsStore,SystemEventsStore,BlockSeqStore,DebondingDelegationSeqStore,DelegationSeqStore,StakingSeqStore,TransactionSeqStore,ValidatorSeqStore,BlockSummaryStore,ValidatorSummaryStore,AccountAggStore,ValidatorAggStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	model "github.com/figment-networks/oasishub-indexer/model"
	store "github.com/figment-networks/oasishub-indexer/store"
	types "github.com/figment-networks/oasishub-indexer/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockDatabaseStore is a mock of DatabaseStore interface
type MockDatabaseStore struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseStoreMockRecorder
}

// MockDatabaseStoreMockRecorder is the mock recorder for MockDatabaseStore
type MockDatabaseStoreMockRecorder struct {
	mock *MockDatabaseStore
}

// NewMockDatabaseStore creates a new mock instance
func NewMockDatabaseStore(ctrl *gomock.Controller) *MockDatabaseStore {
	mock := &MockDatabaseStore{ctrl: ctrl}
	mock.recorder = &MockDatabaseStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabaseStore) EXPECT() *MockDatabaseStoreMockRecorder {
	return m.recorder
}

// GetTotalSize mocks base method
func (m *MockDatabaseStore) GetTotalSize() (*store.GetTotalSizeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalSize")
	ret0, _ := ret[0].(*store.GetTotalSizeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalSize indicates an expected call of GetTotalSize
func (mr *MockDatabaseStoreMockRecorder) GetTotalSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalSize", reflect.TypeOf((*MockDatabaseStore)(nil).GetTotalSize))
}

// MockSyncablesStore is a mock of SyncablesStore interface
type MockSyncablesStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncablesStoreMockRecorder
}

// MockSyncablesStoreMockRecorder is the mock recorder for MockSyncablesStore
type MockSyncablesStoreMockRecorder struct {
	mock *MockSyncablesStore
}

// NewMockSyncablesStore creates a new mock instance
func NewMockSyncablesStore(ctrl *gomock.Controller) *MockSyncablesStore {
	mock := &MockSyncablesStore{ctrl: ctrl}
	mock.recorder = &MockSyncablesStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncablesStore) EXPECT() *MockSyncablesStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSyncablesStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSyncablesStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSyncablesStore)(nil).Create), arg0)
}

// CreateOrUpdate mocks base method
func (m *MockSyncablesStore) CreateOrUpdate(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSyncablesStoreMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSyncablesStore)(nil).CreateOrUpdate), arg0)
}

// FindByHeight mocks base method
func (m *MockSyncablesStore) FindByHeight(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSyncablesStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSyncablesStore)(nil).FindByHeight), arg0)
}

// FindFirstByDifferentIndexVersion mocks base method
func (m *MockSyncablesStore) FindFirstByDifferentIndexVersion(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFirstByDifferentIndexVersion", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFirstByDifferentIndexVersion indicates an expected call of FindFirstByDifferentIndexVersion
func (mr *MockSyncablesStoreMockRecorder) FindFirstByDifferentIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFirstByDifferentIndexVersion", reflect.TypeOf((*MockSyncablesStore)(nil).FindFirstByDifferentIndexVersion), arg0)
}

// FindMostRecent mocks base method
func (m *MockSyncablesStore) FindMostRecent() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSyncablesStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSyncablesStore)(nil).FindMostRecent))
}

// FindMostRecentByDifferentIndexVersion mocks base method
func (m *MockSyncablesStore) FindMostRecentByDifferentIndexVersion(arg0 int64) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByDifferentIndexVersion", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByDifferentIndexVersion indicates an expected call of FindMostRecentByDifferentIndexVersion
func (mr *MockSyncablesStoreMockRecorder) FindMostRecentByDifferentIndexVersion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByDifferentIndexVersion", reflect.TypeOf((*MockSyncablesStore)(nil).FindMostRecentByDifferentIndexVersion), arg0)
}

// FindSmallestIndexVersion mocks base method
func (m *MockSyncablesStore) FindSmallestIndexVersion() (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSmallestIndexVersion")
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSmallestIndexVersion indicates an expected call of FindSmallestIndexVersion
func (mr *MockSyncablesStoreMockRecorder) FindSmallestIndexVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSmallestIndexVersion", reflect.TypeOf((*MockSyncablesStore)(nil).FindSmallestIndexVersion))
}

// GetSyncableForMinTime mocks base method
func (m *MockSyncablesStore) GetSyncableForMinTime(arg0 time.Time) (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncableForMinTime", arg0)
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyncableForMinTime indicates an expected call of GetSyncableForMinTime
func (mr *MockSyncablesStoreMockRecorder) GetSyncableForMinTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncableForMinTime", reflect.TypeOf((*MockSyncablesStore)(nil).GetSyncableForMinTime), arg0)
}

// ResetProcessedAtForRange mocks base method
func (m *MockSyncablesStore) ResetProcessedAtForRange(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetProcessedAtForRange", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetProcessedAtForRange indicates an expected call of ResetProcessedAtForRange
func (mr *MockSyncablesStoreMockRecorder) ResetProcessedAtForRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetProcessedAtForRange", reflect.TypeOf((*MockSyncablesStore)(nil).ResetProcessedAtForRange), arg0, arg1)
}

// Save mocks base method
func (m *MockSyncablesStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSyncablesStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSyncablesStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockSyncablesStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSyncablesStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSyncablesStore)(nil).Update), arg0)
}

// MockReportsStore is a mock of ReportsStore interface
type MockReportsStore struct {
	ctrl     *gomock.Controller
	recorder *MockReportsStoreMockRecorder
}

// MockReportsStoreMockRecorder is the mock recorder for MockReportsStore
type MockReportsStoreMockRecorder struct {
	mock *MockReportsStore
}

// NewMockReportsStore creates a new mock instance
func NewMockReportsStore(ctrl *gomock.Controller) *MockReportsStore {
	mock := &MockReportsStore{ctrl: ctrl}
	mock.recorder = &MockReportsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReportsStore) EXPECT() *MockReportsStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockReportsStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockReportsStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReportsStore)(nil).Create), arg0)
}

// DeleteByKinds mocks base method
func (m *MockReportsStore) DeleteByKinds(arg0 []model.ReportKind) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKinds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByKinds indicates an expected call of DeleteByKinds
func (mr *MockReportsStoreMockRecorder) DeleteByKinds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKinds", reflect.TypeOf((*MockReportsStore)(nil).DeleteByKinds), arg0)
}

// FindNotCompletedByIndexVersion mocks base method
func (m *MockReportsStore) FindNotCompletedByIndexVersion(arg0 int64, arg1 ...model.ReportKind) (*model.Report, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindNotCompletedByIndexVersion", varargs...)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotCompletedByIndexVersion indicates an expected call of FindNotCompletedByIndexVersion
func (mr *MockReportsStoreMockRecorder) FindNotCompletedByIndexVersion(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotCompletedByIndexVersion", reflect.TypeOf((*MockReportsStore)(nil).FindNotCompletedByIndexVersion), varargs...)
}

// FindNotCompletedByKind mocks base method
func (m *MockReportsStore) FindNotCompletedByKind(arg0 ...model.ReportKind) (*model.Report, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindNotCompletedByKind", varargs...)
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotCompletedByKind indicates an expected call of FindNotCompletedByKind
func (mr *MockReportsStoreMockRecorder) FindNotCompletedByKind(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotCompletedByKind", reflect.TypeOf((*MockReportsStore)(nil).FindNotCompletedByKind), arg0...)
}

// Last mocks base method
func (m *MockReportsStore) Last() (*model.Report, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last")
	ret0, _ := ret[0].(*model.Report)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last
func (mr *MockReportsStoreMockRecorder) Last() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockReportsStore)(nil).Last))
}

// Save mocks base method
func (m *MockReportsStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockReportsStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockReportsStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockReportsStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockReportsStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReportsStore)(nil).Update), arg0)
}

// MockSystemEventsStore is a mock of SystemEventsStore interface
type MockSystemEventsStore struct {
	ctrl     *gomock.Controller
	recorder *MockSystemEventsStoreMockRecorder
}

// MockSystemEventsStoreMockRecorder is the mock recorder for MockSystemEventsStore
type MockSystemEventsStoreMockRecorder struct {
	mock *MockSystemEventsStore
}

// NewMockSystemEventsStore creates a new mock instance
func NewMockSystemEventsStore(ctrl *gomock.Controller) *MockSystemEventsStore {
	mock := &MockSystemEventsStore{ctrl: ctrl}
	mock.recorder = &MockSystemEventsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemEventsStore) EXPECT() *MockSystemEventsStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSystemEventsStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockSystemEventsStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSystemEventsStore)(nil).Create), arg0)
}

// CreateOrUpdate mocks base method
func (m *MockSystemEventsStore) CreateOrUpdate(arg0 *model.SystemEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSystemEventsStoreMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSystemEventsStore)(nil).CreateOrUpdate), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockSystemEventsStore) DeleteOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockSystemEventsStoreMockRecorder) DeleteOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockSystemEventsStore)(nil).DeleteOlderThan), arg0)
}

// FindByActor mocks base method
func (m *MockSystemEventsStore) FindByActor(arg0 string, arg1 store.FindSystemEventByActorQuery) ([]model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActor", arg0, arg1)
	ret0, _ := ret[0].([]model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActor indicates an expected call of FindByActor
func (mr *MockSystemEventsStoreMockRecorder) FindByActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActor", reflect.TypeOf((*MockSystemEventsStore)(nil).FindByActor), arg0, arg1)
}

// FindByHeight mocks base method
func (m *MockSystemEventsStore) FindByHeight(arg0 int64) ([]model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockSystemEventsStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockSystemEventsStore)(nil).FindByHeight), arg0)
}

// FindMostRecent mocks base method
func (m *MockSystemEventsStore) FindMostRecent() (*model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSystemEventsStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSystemEventsStore)(nil).FindMostRecent))
}

// FindUnique mocks base method
func (m *MockSystemEventsStore) FindUnique(arg0 int64, arg1 string, arg2 model.SystemEventKind) (*model.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUnique", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUnique indicates an expected call of FindUnique
func (mr *MockSystemEventsStoreMockRecorder) FindUnique(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUnique", reflect.TypeOf((*MockSystemEventsStore)(nil).FindUnique), arg0, arg1, arg2)
}

// Save mocks base method
func (m *MockSystemEventsStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockSystemEventsStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSystemEventsStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockSystemEventsStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockSystemEventsStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSystemEventsStore)(nil).Update), arg0)
}

// MockBlockSeqStore is a mock of BlockSeqStore interface
type MockBlockSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSeqStoreMockRecorder
}

// MockBlockSeqStoreMockRecorder is the mock recorder for MockBlockSeqStore
type MockBlockSeqStoreMockRecorder struct {
	mock *MockBlockSeqStore
}

// NewMockBlockSeqStore creates a new mock instance
func NewMockBlockSeqStore(ctrl *gomock.Controller) *MockBlockSeqStore {
	mock := &MockBlockSeqStore{ctrl: ctrl}
	mock.recorder = &MockBlockSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSeqStore) EXPECT() *MockBlockSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBlockSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockBlockSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBlockSeqStore)(nil).Create), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockBlockSeqStore) DeleteOlderThan(arg0 time.Time, arg1 []store.ActivityPeriodRow) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockBlockSeqStoreMockRecorder) DeleteOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockBlockSeqStore)(nil).DeleteOlderThan), arg0, arg1)
}

// FindBy mocks base method
func (m *MockBlockSeqStore) FindBy(arg0 string, arg1 interface{}) (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockBlockSeqStoreMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockBlockSeqStore)(nil).FindBy), arg0, arg1)
}

// FindByHeight mocks base method
func (m *MockBlockSeqStore) FindByHeight(arg0 int64) (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockBlockSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockBlockSeqStore)(nil).FindByHeight), arg0)
}

// FindMostRecent mocks base method
func (m *MockBlockSeqStore) FindMostRecent() (*model.BlockSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.BlockSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockBlockSeqStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockBlockSeqStore)(nil).FindMostRecent))
}

// GetAvgRecentTimes mocks base method
func (m *MockBlockSeqStore) GetAvgRecentTimes(arg0 int64) (*store.GetAvgRecentTimesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvgRecentTimes", arg0)
	ret0, _ := ret[0].(*store.GetAvgRecentTimesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvgRecentTimes indicates an expected call of GetAvgRecentTimes
func (mr *MockBlockSeqStoreMockRecorder) GetAvgRecentTimes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvgRecentTimes", reflect.TypeOf((*MockBlockSeqStore)(nil).GetAvgRecentTimes), arg0)
}

// Save mocks base method
func (m *MockBlockSeqStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBlockSeqStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlockSeqStore)(nil).Save), arg0)
}

// Summarize mocks base method
func (m *MockBlockSeqStore) Summarize(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]store.BlockSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summarize", arg0, arg1)
	ret0, _ := ret[0].([]store.BlockSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summarize indicates an expected call of Summarize
func (mr *MockBlockSeqStoreMockRecorder) Summarize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockBlockSeqStore)(nil).Summarize), arg0, arg1)
}

// Update mocks base method
func (m *MockBlockSeqStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockBlockSeqStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBlockSeqStore)(nil).Update), arg0)
}

// MockDebondingDelegationSeqStore is a mock of DebondingDelegationSeqStore interface
type MockDebondingDelegationSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockDebondingDelegationSeqStoreMockRecorder
}

// MockDebondingDelegationSeqStoreMockRecorder is the mock recorder for MockDebondingDelegationSeqStore
type MockDebondingDelegationSeqStoreMockRecorder struct {
	mock *MockDebondingDelegationSeqStore
}

// NewMockDebondingDelegationSeqStore creates a new mock instance
func NewMockDebondingDelegationSeqStore(ctrl *gomock.Controller) *MockDebondingDelegationSeqStore {
	mock := &MockDebondingDelegationSeqStore{ctrl: ctrl}
	mock.recorder = &MockDebondingDelegationSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebondingDelegationSeqStore) EXPECT() *MockDebondingDelegationSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDebondingDelegationSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDebondingDelegationSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDebondingDelegationSeqStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockDebondingDelegationSeqStore) FindByHeight(arg0 int64) ([]model.DebondingDelegationSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.DebondingDelegationSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockDebondingDelegationSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockDebondingDelegationSeqStore)(nil).FindByHeight), arg0)
}

// FindRecentByDelegatorUID mocks base method
func (m *MockDebondingDelegationSeqStore) FindRecentByDelegatorUID(arg0 string, arg1 int64) ([]model.DebondingDelegationSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRecentByDelegatorUID", arg0, arg1)
	ret0, _ := ret[0].([]model.DebondingDelegationSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRecentByDelegatorUID indicates an expected call of FindRecentByDelegatorUID
func (mr *MockDebondingDelegationSeqStoreMockRecorder) FindRecentByDelegatorUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRecentByDelegatorUID", reflect.TypeOf((*MockDebondingDelegationSeqStore)(nil).FindRecentByDelegatorUID), arg0, arg1)
}

// FindRecentByValidatorUID mocks base method
func (m *MockDebondingDelegationSeqStore) FindRecentByValidatorUID(arg0 string, arg1 int64) ([]model.DebondingDelegationSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRecentByValidatorUID", arg0, arg1)
	ret0, _ := ret[0].([]model.DebondingDelegationSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRecentByValidatorUID indicates an expected call of FindRecentByValidatorUID
func (mr *MockDebondingDelegationSeqStoreMockRecorder) FindRecentByValidatorUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRecentByValidatorUID", reflect.TypeOf((*MockDebondingDelegationSeqStore)(nil).FindRecentByValidatorUID), arg0, arg1)
}

// Save mocks base method
func (m *MockDebondingDelegationSeqStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockDebondingDelegationSeqStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDebondingDelegationSeqStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockDebondingDelegationSeqStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDebondingDelegationSeqStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDebondingDelegationSeqStore)(nil).Update), arg0)
}

// MockDelegationSeqStore is a mock of DelegationSeqStore interface
type MockDelegationSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationSeqStoreMockRecorder
}

// MockDelegationSeqStoreMockRecorder is the mock recorder for MockDelegationSeqStore
type MockDelegationSeqStoreMockRecorder struct {
	mock *MockDelegationSeqStore
}

// NewMockDelegationSeqStore creates a new mock instance
func NewMockDelegationSeqStore(ctrl *gomock.Controller) *MockDelegationSeqStore {
	mock := &MockDelegationSeqStore{ctrl: ctrl}
	mock.recorder = &MockDelegationSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelegationSeqStore) EXPECT() *MockDelegationSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDelegationSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDelegationSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDelegationSeqStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockDelegationSeqStore) FindByHeight(arg0 int64) ([]model.DelegationSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.DelegationSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockDelegationSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockDelegationSeqStore)(nil).FindByHeight), arg0)
}

// FindCurrentByDelegatorUID mocks base method
func (m *MockDelegationSeqStore) FindCurrentByDelegatorUID(arg0 string) ([]model.DelegationSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCurrentByDelegatorUID", arg0)
	ret0, _ := ret[0].([]model.DelegationSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCurrentByDelegatorUID indicates an expected call of FindCurrentByDelegatorUID
func (mr *MockDelegationSeqStoreMockRecorder) FindCurrentByDelegatorUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCurrentByDelegatorUID", reflect.TypeOf((*MockDelegationSeqStore)(nil).FindCurrentByDelegatorUID), arg0)
}

// FindLastByValidatorUID mocks base method
func (m *MockDelegationSeqStore) FindLastByValidatorUID(arg0 string) ([]model.DelegationSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByValidatorUID", arg0)
	ret0, _ := ret[0].([]model.DelegationSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByValidatorUID indicates an expected call of FindLastByValidatorUID
func (mr *MockDelegationSeqStoreMockRecorder) FindLastByValidatorUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByValidatorUID", reflect.TypeOf((*MockDelegationSeqStore)(nil).FindLastByValidatorUID), arg0)
}

// Save mocks base method
func (m *MockDelegationSeqStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockDelegationSeqStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDelegationSeqStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockDelegationSeqStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDelegationSeqStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDelegationSeqStore)(nil).Update), arg0)
}

// MockStakingSeqStore is a mock of StakingSeqStore interface
type MockStakingSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockStakingSeqStoreMockRecorder
}

// MockStakingSeqStoreMockRecorder is the mock recorder for MockStakingSeqStore
type MockStakingSeqStoreMockRecorder struct {
	mock *MockStakingSeqStore
}

// NewMockStakingSeqStore creates a new mock instance
func NewMockStakingSeqStore(ctrl *gomock.Controller) *MockStakingSeqStore {
	mock := &MockStakingSeqStore{ctrl: ctrl}
	mock.recorder = &MockStakingSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStakingSeqStore) EXPECT() *MockStakingSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStakingSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStakingSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStakingSeqStore)(nil).Create), arg0)
}

// FindBy mocks base method
func (m *MockStakingSeqStore) FindBy(arg0 string, arg1 interface{}) (*model.StakingSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*model.StakingSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockStakingSeqStoreMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockStakingSeqStore)(nil).FindBy), arg0, arg1)
}

// FindByHeight mocks base method
func (m *MockStakingSeqStore) FindByHeight(arg0 int64) (*model.StakingSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.StakingSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockStakingSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockStakingSeqStore)(nil).FindByHeight), arg0)
}

// Recent mocks base method
func (m *MockStakingSeqStore) Recent() (*model.StakingSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recent")
	ret0, _ := ret[0].(*model.StakingSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recent indicates an expected call of Recent
func (mr *MockStakingSeqStoreMockRecorder) Recent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recent", reflect.TypeOf((*MockStakingSeqStore)(nil).Recent))
}

// Save mocks base method
func (m *MockStakingSeqStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockStakingSeqStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStakingSeqStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockStakingSeqStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockStakingSeqStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStakingSeqStore)(nil).Update), arg0)
}

// MockTransactionSeqStore is a mock of TransactionSeqStore interface
type MockTransactionSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionSeqStoreMockRecorder
}

// MockTransactionSeqStoreMockRecorder is the mock recorder for MockTransactionSeqStore
type MockTransactionSeqStoreMockRecorder struct {
	mock *MockTransactionSeqStore
}

// NewMockTransactionSeqStore creates a new mock instance
func NewMockTransactionSeqStore(ctrl *gomock.Controller) *MockTransactionSeqStore {
	mock := &MockTransactionSeqStore{ctrl: ctrl}
	mock.recorder = &MockTransactionSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionSeqStore) EXPECT() *MockTransactionSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTransactionSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTransactionSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionSeqStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockTransactionSeqStore) FindByHeight(arg0 int64) ([]model.TransactionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.TransactionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockTransactionSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockTransactionSeqStore)(nil).FindByHeight), arg0)
}

// Save mocks base method
func (m *MockTransactionSeqStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockTransactionSeqStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTransactionSeqStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockTransactionSeqStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTransactionSeqStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransactionSeqStore)(nil).Update), arg0)
}

// MockValidatorSeqStore is a mock of ValidatorSeqStore interface
type MockValidatorSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSeqStoreMockRecorder
}

// MockValidatorSeqStoreMockRecorder is the mock recorder for MockValidatorSeqStore
type MockValidatorSeqStoreMockRecorder struct {
	mock *MockValidatorSeqStore
}

// NewMockValidatorSeqStore creates a new mock instance
func NewMockValidatorSeqStore(ctrl *gomock.Controller) *MockValidatorSeqStore {
	mock := &MockValidatorSeqStore{ctrl: ctrl}
	mock.recorder = &MockValidatorSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSeqStore) EXPECT() *MockValidatorSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorSeqStore)(nil).Create), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockValidatorSeqStore) DeleteOlderThan(arg0 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockValidatorSeqStoreMockRecorder) DeleteOlderThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockValidatorSeqStore)(nil).DeleteOlderThan), arg0)
}

// FindByHeight mocks base method
func (m *MockValidatorSeqStore) FindByHeight(arg0 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockValidatorSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindByHeight), arg0)
}

// FindByHeightAndEntityUID mocks base method
func (m *MockValidatorSeqStore) FindByHeightAndEntityUID(arg0 int64, arg1 string) (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeightAndEntityUID", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeightAndEntityUID indicates an expected call of FindByHeightAndEntityUID
func (mr *MockValidatorSeqStoreMockRecorder) FindByHeightAndEntityUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeightAndEntityUID", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindByHeightAndEntityUID), arg0, arg1)
}

// FindLastByAddress mocks base method
func (m *MockValidatorSeqStore) FindLastByAddress(arg0 string, arg1 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLastByAddress", arg0, arg1)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLastByAddress indicates an expected call of FindLastByAddress
func (mr *MockValidatorSeqStoreMockRecorder) FindLastByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLastByAddress", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindLastByAddress), arg0, arg1)
}

// FindMostRecent mocks base method
func (m *MockValidatorSeqStore) FindMostRecent() (*model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockValidatorSeqStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindMostRecent))
}

// Save mocks base method
func (m *MockValidatorSeqStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorSeqStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorSeqStore)(nil).Save), arg0)
}

// Summarize mocks base method
func (m *MockValidatorSeqStore) Summarize(arg0 types.SummaryInterval, arg1 []store.ActivityPeriodRow) ([]store.ValidatorSeqSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Summarize", arg0, arg1)
	ret0, _ := ret[0].([]store.ValidatorSeqSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summarize indicates an expected call of Summarize
func (mr *MockValidatorSeqStoreMockRecorder) Summarize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockValidatorSeqStore)(nil).Summarize), arg0, arg1)
}

// Update mocks base method
func (m *MockValidatorSeqStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockValidatorSeqStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockValidatorSeqStore)(nil).Update), arg0)
}

// MockBlockSummaryStore is a mock of BlockSummaryStore interface
type MockBlockSummaryStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSummaryStoreMockRecorder
}

// MockBlockSummaryStoreMockRecorder is the mock recorder for MockBlockSummaryStore
type MockBlockSummaryStoreMockRecorder struct {
	mock *MockBlockSummaryStore
}

// NewMockBlockSummaryStore creates a new mock instance
func NewMockBlockSummaryStore(ctrl *gomock.Controller) *MockBlockSummaryStore {
	mock := &MockBlockSummaryStore{ctrl: ctrl}
	mock.recorder = &MockBlockSummaryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSummaryStore) EXPECT() *MockBlockSummaryStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBlockSummaryStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockBlockSummaryStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBlockSummaryStore)(nil).Create), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockBlockSummaryStore) DeleteOlderThan(arg0 types.SummaryInterval, arg1 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockBlockSummaryStoreMockRecorder) DeleteOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockBlockSummaryStore)(nil).DeleteOlderThan), arg0, arg1)
}

// Find mocks base method
func (m *MockBlockSummaryStore) Find(arg0 *model.BlockSummary) (*model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockBlockSummaryStoreMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBlockSummaryStore)(nil).Find), arg0)
}

// FindActivityPeriods mocks base method
func (m *MockBlockSummaryStore) FindActivityPeriods(arg0 types.SummaryInterval, arg1 int64) ([]store.ActivityPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActivityPeriods", arg0, arg1)
	ret0, _ := ret[0].([]store.ActivityPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActivityPeriods indicates an expected call of FindActivityPeriods
func (mr *MockBlockSummaryStoreMockRecorder) FindActivityPeriods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActivityPeriods", reflect.TypeOf((*MockBlockSummaryStore)(nil).FindActivityPeriods), arg0, arg1)
}

// FindMostRecentByInterval mocks base method
func (m *MockBlockSummaryStore) FindMostRecentByInterval(arg0 types.SummaryInterval) (*model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByInterval", arg0)
	ret0, _ := ret[0].(*model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByInterval indicates an expected call of FindMostRecentByInterval
func (mr *MockBlockSummaryStoreMockRecorder) FindMostRecentByInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByInterval", reflect.TypeOf((*MockBlockSummaryStore)(nil).FindMostRecentByInterval), arg0)
}

// FindSummary mocks base method
func (m *MockBlockSummaryStore) FindSummary(arg0 types.SummaryInterval, arg1 string) ([]model.BlockSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummary", arg0, arg1)
	ret0, _ := ret[0].([]model.BlockSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummary indicates an expected call of FindSummary
func (mr *MockBlockSummaryStoreMockRecorder) FindSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummary", reflect.TypeOf((*MockBlockSummaryStore)(nil).FindSummary), arg0, arg1)
}

// Save mocks base method
func (m *MockBlockSummaryStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockBlockSummaryStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockBlockSummaryStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockBlockSummaryStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockBlockSummaryStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBlockSummaryStore)(nil).Update), arg0)
}

// MockValidatorSummaryStore is a mock of ValidatorSummaryStore interface
type MockValidatorSummaryStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSummaryStoreMockRecorder
}

// MockValidatorSummaryStoreMockRecorder is the mock recorder for MockValidatorSummaryStore
type MockValidatorSummaryStoreMockRecorder struct {
	mock *MockValidatorSummaryStore
}

// NewMockValidatorSummaryStore creates a new mock instance
func NewMockValidatorSummaryStore(ctrl *gomock.Controller) *MockValidatorSummaryStore {
	mock := &MockValidatorSummaryStore{ctrl: ctrl}
	mock.recorder = &MockValidatorSummaryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSummaryStore) EXPECT() *MockValidatorSummaryStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorSummaryStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorSummaryStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorSummaryStore)(nil).Create), arg0)
}

// DeleteOlderThan mocks base method
func (m *MockValidatorSummaryStore) DeleteOlderThan(arg0 types.SummaryInterval, arg1 time.Time) (*int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOlderThan", arg0, arg1)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOlderThan indicates an expected call of DeleteOlderThan
func (mr *MockValidatorSummaryStoreMockRecorder) DeleteOlderThan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOlderThan", reflect.TypeOf((*MockValidatorSummaryStore)(nil).DeleteOlderThan), arg0, arg1)
}

// Find mocks base method
func (m *MockValidatorSummaryStore) Find(arg0 *model.ValidatorSummary) (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockValidatorSummaryStoreMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockValidatorSummaryStore)(nil).Find), arg0)
}

// FindActivityPeriods mocks base method
func (m *MockValidatorSummaryStore) FindActivityPeriods(arg0 types.SummaryInterval, arg1 int64) ([]store.ActivityPeriodRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActivityPeriods", arg0, arg1)
	ret0, _ := ret[0].([]store.ActivityPeriodRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActivityPeriods indicates an expected call of FindActivityPeriods
func (mr *MockValidatorSummaryStoreMockRecorder) FindActivityPeriods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActivityPeriods", reflect.TypeOf((*MockValidatorSummaryStore)(nil).FindActivityPeriods), arg0, arg1)
}

// FindAllByTimePeriod mocks base method
func (m *MockValidatorSummaryStore) FindAllByTimePeriod(arg0, arg1 *types.Time, arg2 ...string) ([]model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAllByTimePeriod", varargs...)
	ret0, _ := ret[0].([]model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByTimePeriod indicates an expected call of FindAllByTimePeriod
func (mr *MockValidatorSummaryStoreMockRecorder) FindAllByTimePeriod(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByTimePeriod", reflect.TypeOf((*MockValidatorSummaryStore)(nil).FindAllByTimePeriod), varargs...)
}

// FindMostRecent mocks base method
func (m *MockValidatorSummaryStore) FindMostRecent() (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockValidatorSummaryStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockValidatorSummaryStore)(nil).FindMostRecent))
}

// FindMostRecentByInterval mocks base method
func (m *MockValidatorSummaryStore) FindMostRecentByInterval(arg0 types.SummaryInterval) (*model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecentByInterval", arg0)
	ret0, _ := ret[0].(*model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecentByInterval indicates an expected call of FindMostRecentByInterval
func (mr *MockValidatorSummaryStoreMockRecorder) FindMostRecentByInterval(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecentByInterval", reflect.TypeOf((*MockValidatorSummaryStore)(nil).FindMostRecentByInterval), arg0)
}

// FindSummary mocks base method
func (m *MockValidatorSummaryStore) FindSummary(arg0 types.SummaryInterval, arg1 string) ([]store.ValidatorSummaryRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummary", arg0, arg1)
	ret0, _ := ret[0].([]store.ValidatorSummaryRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummary indicates an expected call of FindSummary
func (mr *MockValidatorSummaryStoreMockRecorder) FindSummary(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummary", reflect.TypeOf((*MockValidatorSummaryStore)(nil).FindSummary), arg0, arg1)
}

// FindSummaryByAddress mocks base method
func (m *MockValidatorSummaryStore) FindSummaryByAddress(arg0 string, arg1 types.SummaryInterval, arg2 string) ([]model.ValidatorSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSummaryByAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].([]model.ValidatorSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSummaryByAddress indicates an expected call of FindSummaryByAddress
func (mr *MockValidatorSummaryStoreMockRecorder) FindSummaryByAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSummaryByAddress", reflect.TypeOf((*MockValidatorSummaryStore)(nil).FindSummaryByAddress), arg0, arg1, arg2)
}

// Save mocks base method
func (m *MockValidatorSummaryStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorSummaryStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorSummaryStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockValidatorSummaryStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockValidatorSummaryStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockValidatorSummaryStore)(nil).Update), arg0)
}

// MockAccountAggStore is a mock of AccountAggStore interface
type MockAccountAggStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAggStoreMockRecorder
}

// MockAccountAggStoreMockRecorder is the mock recorder for MockAccountAggStore
type MockAccountAggStoreMockRecorder struct {
	mock *MockAccountAggStore
}

// NewMockAccountAggStore creates a new mock instance
func NewMockAccountAggStore(ctrl *gomock.Controller) *MockAccountAggStore {
	mock := &MockAccountAggStore{ctrl: ctrl}
	mock.recorder = &MockAccountAggStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAggStore) EXPECT() *MockAccountAggStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAccountAggStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAccountAggStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountAggStore)(nil).Create), arg0)
}

// FindBy mocks base method
func (m *MockAccountAggStore) FindBy(arg0 string, arg1 interface{}) (*model.AccountAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*model.AccountAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockAccountAggStoreMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockAccountAggStore)(nil).FindBy), arg0, arg1)
}

// FindByPublicKey mocks base method
func (m *MockAccountAggStore) FindByPublicKey(arg0 string) (*model.AccountAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPublicKey", arg0)
	ret0, _ := ret[0].(*model.AccountAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPublicKey indicates an expected call of FindByPublicKey
func (mr *MockAccountAggStoreMockRecorder) FindByPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPublicKey", reflect.TypeOf((*MockAccountAggStore)(nil).FindByPublicKey), arg0)
}

// Save mocks base method
func (m *MockAccountAggStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountAggStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountAggStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockAccountAggStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAccountAggStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountAggStore)(nil).Update), arg0)
}

// MockValidatorAggStore is a mock of ValidatorAggStore interface
type MockValidatorAggStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggStoreMockRecorder
}

// MockValidatorAggStoreMockRecorder is the mock recorder for MockValidatorAggStore
type MockValidatorAggStoreMockRecorder struct {
	mock *MockValidatorAggStore
}

// NewMockValidatorAggStore creates a new mock instance
func NewMockValidatorAggStore(ctrl *gomock.Controller) *MockValidatorAggStore {
	mock := &MockValidatorAggStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggStore) EXPECT() *MockValidatorAggStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorAggStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorAggStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorAggStore)(nil).Create), arg0)
}

// CreateOrUpdate mocks base method
func (m *MockValidatorAggStore) CreateOrUpdate(arg0 *model.ValidatorAgg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockValidatorAggStoreMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockValidatorAggStore)(nil).CreateOrUpdate), arg0)
}

// FindBy mocks base method
func (m *MockValidatorAggStore) FindBy(arg0 string, arg1 interface{}) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy
func (mr *MockValidatorAggStoreMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockValidatorAggStore)(nil).FindBy), arg0, arg1)
}

// FindByAddress mocks base method
func (m *MockValidatorAggStore) FindByAddress(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddress", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddress indicates an expected call of FindByAddress
func (mr *MockValidatorAggStoreMockRecorder) FindByAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddress", reflect.TypeOf((*MockValidatorAggStore)(nil).FindByAddress), arg0)
}

// FindByEntityUID mocks base method
func (m *MockValidatorAggStore) FindByEntityUID(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEntityUID", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEntityUID indicates an expected call of FindByEntityUID
func (mr *MockValidatorAggStoreMockRecorder) FindByEntityUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEntityUID", reflect.TypeOf((*MockValidatorAggStore)(nil).FindByEntityUID), arg0)
}

// GetAllForHeightGreaterThan mocks base method
func (m *MockValidatorAggStore) GetAllForHeightGreaterThan(arg0 int64) ([]model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForHeightGreaterThan", arg0)
	ret0, _ := ret[0].([]model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForHeightGreaterThan indicates an expected call of GetAllForHeightGreaterThan
func (mr *MockValidatorAggStoreMockRecorder) GetAllForHeightGreaterThan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForHeightGreaterThan", reflect.TypeOf((*MockValidatorAggStore)(nil).GetAllForHeightGreaterThan), arg0)
}

// Save mocks base method
func (m *MockValidatorAggStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorAggStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorAggStore)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockValidatorAggStore) Update(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockValidatorAggStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockValidatorAggStore)(nil).Update), arg0)
}
