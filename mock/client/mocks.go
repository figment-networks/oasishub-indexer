// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/oasishub-indexer/client (interfaces: AccountClient,BlockClient,ChainClient,StateClient,TransactionClient,ValidatorClient)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	accountpb "github.com/figment-networks/oasis-rpc-proxy/grpc/account/accountpb"
	blockpb "github.com/figment-networks/oasis-rpc-proxy/grpc/block/blockpb"
	chainpb "github.com/figment-networks/oasis-rpc-proxy/grpc/chain/chainpb"
	statepb "github.com/figment-networks/oasis-rpc-proxy/grpc/state/statepb"
	transactionpb "github.com/figment-networks/oasis-rpc-proxy/grpc/transaction/transactionpb"
	validatorpb "github.com/figment-networks/oasis-rpc-proxy/grpc/validator/validatorpb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountClient is a mock of AccountClient interface
type MockAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountClientMockRecorder
}

// MockAccountClientMockRecorder is the mock recorder for MockAccountClient
type MockAccountClientMockRecorder struct {
	mock *MockAccountClient
}

// NewMockAccountClient creates a new mock instance
func NewMockAccountClient(ctrl *gomock.Controller) *MockAccountClient {
	mock := &MockAccountClient{ctrl: ctrl}
	mock.recorder = &MockAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountClient) EXPECT() *MockAccountClientMockRecorder {
	return m.recorder
}

// GetByPublicKey mocks base method
func (m *MockAccountClient) GetByPublicKey(arg0 string, arg1 int64) (*accountpb.GetByPublicKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPublicKey", arg0, arg1)
	ret0, _ := ret[0].(*accountpb.GetByPublicKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPublicKey indicates an expected call of GetByPublicKey
func (mr *MockAccountClientMockRecorder) GetByPublicKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPublicKey", reflect.TypeOf((*MockAccountClient)(nil).GetByPublicKey), arg0, arg1)
}

// MockBlockClient is a mock of BlockClient interface
type MockBlockClient struct {
	ctrl     *gomock.Controller
	recorder *MockBlockClientMockRecorder
}

// MockBlockClientMockRecorder is the mock recorder for MockBlockClient
type MockBlockClientMockRecorder struct {
	mock *MockBlockClient
}

// NewMockBlockClient creates a new mock instance
func NewMockBlockClient(ctrl *gomock.Controller) *MockBlockClient {
	mock := &MockBlockClient{ctrl: ctrl}
	mock.recorder = &MockBlockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockClient) EXPECT() *MockBlockClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockBlockClient) GetByHeight(arg0 int64) (*blockpb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*blockpb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockBlockClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockBlockClient)(nil).GetByHeight), arg0)
}

// MockChainClient is a mock of ChainClient interface
type MockChainClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainClientMockRecorder
}

// MockChainClientMockRecorder is the mock recorder for MockChainClient
type MockChainClientMockRecorder struct {
	mock *MockChainClient
}

// NewMockChainClient creates a new mock instance
func NewMockChainClient(ctrl *gomock.Controller) *MockChainClient {
	mock := &MockChainClient{ctrl: ctrl}
	mock.recorder = &MockChainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainClient) EXPECT() *MockChainClientMockRecorder {
	return m.recorder
}

// GetHead mocks base method
func (m *MockChainClient) GetHead() (*chainpb.GetCurrentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHead")
	ret0, _ := ret[0].(*chainpb.GetCurrentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHead indicates an expected call of GetHead
func (mr *MockChainClientMockRecorder) GetHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHead", reflect.TypeOf((*MockChainClient)(nil).GetHead))
}

// MockStateClient is a mock of StateClient interface
type MockStateClient struct {
	ctrl     *gomock.Controller
	recorder *MockStateClientMockRecorder
}

// MockStateClientMockRecorder is the mock recorder for MockStateClient
type MockStateClientMockRecorder struct {
	mock *MockStateClient
}

// NewMockStateClient creates a new mock instance
func NewMockStateClient(ctrl *gomock.Controller) *MockStateClient {
	mock := &MockStateClient{ctrl: ctrl}
	mock.recorder = &MockStateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateClient) EXPECT() *MockStateClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockStateClient) GetByHeight(arg0 int64) (*statepb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*statepb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockStateClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockStateClient)(nil).GetByHeight), arg0)
}

// GetStakingByHeight mocks base method
func (m *MockStateClient) GetStakingByHeight(arg0 int64) (*statepb.GetStakingByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakingByHeight", arg0)
	ret0, _ := ret[0].(*statepb.GetStakingByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakingByHeight indicates an expected call of GetStakingByHeight
func (mr *MockStateClientMockRecorder) GetStakingByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakingByHeight", reflect.TypeOf((*MockStateClient)(nil).GetStakingByHeight), arg0)
}

// MockTransactionClient is a mock of TransactionClient interface
type MockTransactionClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionClientMockRecorder
}

// MockTransactionClientMockRecorder is the mock recorder for MockTransactionClient
type MockTransactionClientMockRecorder struct {
	mock *MockTransactionClient
}

// NewMockTransactionClient creates a new mock instance
func NewMockTransactionClient(ctrl *gomock.Controller) *MockTransactionClient {
	mock := &MockTransactionClient{ctrl: ctrl}
	mock.recorder = &MockTransactionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionClient) EXPECT() *MockTransactionClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockTransactionClient) GetByHeight(arg0 int64) (*transactionpb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*transactionpb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockTransactionClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockTransactionClient)(nil).GetByHeight), arg0)
}

// MockValidatorClient is a mock of ValidatorClient interface
type MockValidatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorClientMockRecorder
}

// MockValidatorClientMockRecorder is the mock recorder for MockValidatorClient
type MockValidatorClientMockRecorder struct {
	mock *MockValidatorClient
}

// NewMockValidatorClient creates a new mock instance
func NewMockValidatorClient(ctrl *gomock.Controller) *MockValidatorClient {
	mock := &MockValidatorClient{ctrl: ctrl}
	mock.recorder = &MockValidatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorClient) EXPECT() *MockValidatorClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockValidatorClient) GetByHeight(arg0 int64) (*validatorpb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*validatorpb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockValidatorClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockValidatorClient)(nil).GetByHeight), arg0)
}
