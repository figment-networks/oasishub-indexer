// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/oasishub-indexer/indexer (interfaces: AccountAggStore,SyncableStore,ValidatorAggStore)

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	model "github.com/figment-networks/oasishub-indexer/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountAggStore is a mock of AccountAggStore interface
type MockAccountAggStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAggStoreMockRecorder
}

// MockAccountAggStoreMockRecorder is the mock recorder for MockAccountAggStore
type MockAccountAggStoreMockRecorder struct {
	mock *MockAccountAggStore
}

// NewMockAccountAggStore creates a new mock instance
func NewMockAccountAggStore(ctrl *gomock.Controller) *MockAccountAggStore {
	mock := &MockAccountAggStore{ctrl: ctrl}
	mock.recorder = &MockAccountAggStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAggStore) EXPECT() *MockAccountAggStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAccountAggStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAccountAggStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountAggStore)(nil).Create), arg0)
}

// FindByPublicKey mocks base method
func (m *MockAccountAggStore) FindByPublicKey(arg0 string) (*model.AccountAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPublicKey", arg0)
	ret0, _ := ret[0].(*model.AccountAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPublicKey indicates an expected call of FindByPublicKey
func (mr *MockAccountAggStoreMockRecorder) FindByPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPublicKey", reflect.TypeOf((*MockAccountAggStore)(nil).FindByPublicKey), arg0)
}

// Save mocks base method
func (m *MockAccountAggStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountAggStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountAggStore)(nil).Save), arg0)
}

// MockSyncableStore is a mock of SyncableStore interface
type MockSyncableStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncableStoreMockRecorder
}

// MockSyncableStoreMockRecorder is the mock recorder for MockSyncableStore
type MockSyncableStoreMockRecorder struct {
	mock *MockSyncableStore
}

// NewMockSyncableStore creates a new mock instance
func NewMockSyncableStore(ctrl *gomock.Controller) *MockSyncableStore {
	mock := &MockSyncableStore{ctrl: ctrl}
	mock.recorder = &MockSyncableStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncableStore) EXPECT() *MockSyncableStoreMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSyncableStore) CreateOrUpdate(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSyncableStoreMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSyncableStore)(nil).CreateOrUpdate), arg0)
}

// FindMostRecent mocks base method
func (m *MockSyncableStore) FindMostRecent() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSyncableStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSyncableStore)(nil).FindMostRecent))
}

// MockValidatorAggStore is a mock of ValidatorAggStore interface
type MockValidatorAggStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggStoreMockRecorder
}

// MockValidatorAggStoreMockRecorder is the mock recorder for MockValidatorAggStore
type MockValidatorAggStoreMockRecorder struct {
	mock *MockValidatorAggStore
}

// NewMockValidatorAggStore creates a new mock instance
func NewMockValidatorAggStore(ctrl *gomock.Controller) *MockValidatorAggStore {
	mock := &MockValidatorAggStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggStore) EXPECT() *MockValidatorAggStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorAggStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorAggStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorAggStore)(nil).Create), arg0)
}

// FindByEntityUID mocks base method
func (m *MockValidatorAggStore) FindByEntityUID(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEntityUID", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEntityUID indicates an expected call of FindByEntityUID
func (mr *MockValidatorAggStoreMockRecorder) FindByEntityUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEntityUID", reflect.TypeOf((*MockValidatorAggStore)(nil).FindByEntityUID), arg0)
}

// Save mocks base method
func (m *MockValidatorAggStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorAggStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorAggStore)(nil).Save), arg0)
}
