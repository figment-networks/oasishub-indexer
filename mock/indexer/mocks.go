// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/oasishub-indexer/indexer (interfaces: AccountAggStore,BlockSeqStore,DebondingDelegationSeqStore,DelegationSeqStore,StakingSeqStore,SyncableStore,TransactionSeqStore,ValidatorAggStore,ValidatorSeqStore)

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	model "github.com/figment-networks/oasishub-indexer/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountAggStore is a mock of AccountAggStore interface
type MockAccountAggStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAggStoreMockRecorder
}

// MockAccountAggStoreMockRecorder is the mock recorder for MockAccountAggStore
type MockAccountAggStoreMockRecorder struct {
	mock *MockAccountAggStore
}

// NewMockAccountAggStore creates a new mock instance
func NewMockAccountAggStore(ctrl *gomock.Controller) *MockAccountAggStore {
	mock := &MockAccountAggStore{ctrl: ctrl}
	mock.recorder = &MockAccountAggStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAggStore) EXPECT() *MockAccountAggStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAccountAggStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAccountAggStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountAggStore)(nil).Create), arg0)
}

// FindByPublicKey mocks base method
func (m *MockAccountAggStore) FindByPublicKey(arg0 string) (*model.AccountAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPublicKey", arg0)
	ret0, _ := ret[0].(*model.AccountAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPublicKey indicates an expected call of FindByPublicKey
func (mr *MockAccountAggStoreMockRecorder) FindByPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPublicKey", reflect.TypeOf((*MockAccountAggStore)(nil).FindByPublicKey), arg0)
}

// Save mocks base method
func (m *MockAccountAggStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockAccountAggStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAccountAggStore)(nil).Save), arg0)
}

// MockBlockSeqStore is a mock of BlockSeqStore interface
type MockBlockSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockBlockSeqStoreMockRecorder
}

// MockBlockSeqStoreMockRecorder is the mock recorder for MockBlockSeqStore
type MockBlockSeqStoreMockRecorder struct {
	mock *MockBlockSeqStore
}

// NewMockBlockSeqStore creates a new mock instance
func NewMockBlockSeqStore(ctrl *gomock.Controller) *MockBlockSeqStore {
	mock := &MockBlockSeqStore{ctrl: ctrl}
	mock.recorder = &MockBlockSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockSeqStore) EXPECT() *MockBlockSeqStoreMockRecorder {
	return m.recorder
}

// CreateIfNotExists mocks base method
func (m *MockBlockSeqStore) CreateIfNotExists(arg0 *model.BlockSeq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIfNotExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIfNotExists indicates an expected call of CreateIfNotExists
func (mr *MockBlockSeqStoreMockRecorder) CreateIfNotExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIfNotExists", reflect.TypeOf((*MockBlockSeqStore)(nil).CreateIfNotExists), arg0)
}

// MockDebondingDelegationSeqStore is a mock of DebondingDelegationSeqStore interface
type MockDebondingDelegationSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockDebondingDelegationSeqStoreMockRecorder
}

// MockDebondingDelegationSeqStoreMockRecorder is the mock recorder for MockDebondingDelegationSeqStore
type MockDebondingDelegationSeqStoreMockRecorder struct {
	mock *MockDebondingDelegationSeqStore
}

// NewMockDebondingDelegationSeqStore creates a new mock instance
func NewMockDebondingDelegationSeqStore(ctrl *gomock.Controller) *MockDebondingDelegationSeqStore {
	mock := &MockDebondingDelegationSeqStore{ctrl: ctrl}
	mock.recorder = &MockDebondingDelegationSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDebondingDelegationSeqStore) EXPECT() *MockDebondingDelegationSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDebondingDelegationSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDebondingDelegationSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDebondingDelegationSeqStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockDebondingDelegationSeqStore) FindByHeight(arg0 int64) ([]model.DebondingDelegationSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.DebondingDelegationSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockDebondingDelegationSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockDebondingDelegationSeqStore)(nil).FindByHeight), arg0)
}

// MockDelegationSeqStore is a mock of DelegationSeqStore interface
type MockDelegationSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationSeqStoreMockRecorder
}

// MockDelegationSeqStoreMockRecorder is the mock recorder for MockDelegationSeqStore
type MockDelegationSeqStoreMockRecorder struct {
	mock *MockDelegationSeqStore
}

// NewMockDelegationSeqStore creates a new mock instance
func NewMockDelegationSeqStore(ctrl *gomock.Controller) *MockDelegationSeqStore {
	mock := &MockDelegationSeqStore{ctrl: ctrl}
	mock.recorder = &MockDelegationSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelegationSeqStore) EXPECT() *MockDelegationSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockDelegationSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockDelegationSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDelegationSeqStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockDelegationSeqStore) FindByHeight(arg0 int64) ([]model.DelegationSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.DelegationSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockDelegationSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockDelegationSeqStore)(nil).FindByHeight), arg0)
}

// MockStakingSeqStore is a mock of StakingSeqStore interface
type MockStakingSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockStakingSeqStoreMockRecorder
}

// MockStakingSeqStoreMockRecorder is the mock recorder for MockStakingSeqStore
type MockStakingSeqStoreMockRecorder struct {
	mock *MockStakingSeqStore
}

// NewMockStakingSeqStore creates a new mock instance
func NewMockStakingSeqStore(ctrl *gomock.Controller) *MockStakingSeqStore {
	mock := &MockStakingSeqStore{ctrl: ctrl}
	mock.recorder = &MockStakingSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStakingSeqStore) EXPECT() *MockStakingSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockStakingSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockStakingSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStakingSeqStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockStakingSeqStore) FindByHeight(arg0 int64) (*model.StakingSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].(*model.StakingSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockStakingSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockStakingSeqStore)(nil).FindByHeight), arg0)
}

// MockSyncableStore is a mock of SyncableStore interface
type MockSyncableStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncableStoreMockRecorder
}

// MockSyncableStoreMockRecorder is the mock recorder for MockSyncableStore
type MockSyncableStoreMockRecorder struct {
	mock *MockSyncableStore
}

// NewMockSyncableStore creates a new mock instance
func NewMockSyncableStore(ctrl *gomock.Controller) *MockSyncableStore {
	mock := &MockSyncableStore{ctrl: ctrl}
	mock.recorder = &MockSyncableStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncableStore) EXPECT() *MockSyncableStoreMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSyncableStore) CreateOrUpdate(arg0 *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSyncableStoreMockRecorder) CreateOrUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSyncableStore)(nil).CreateOrUpdate), arg0)
}

// FindMostRecent mocks base method
func (m *MockSyncableStore) FindMostRecent() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MockSyncableStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MockSyncableStore)(nil).FindMostRecent))
}

// MockTransactionSeqStore is a mock of TransactionSeqStore interface
type MockTransactionSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionSeqStoreMockRecorder
}

// MockTransactionSeqStoreMockRecorder is the mock recorder for MockTransactionSeqStore
type MockTransactionSeqStoreMockRecorder struct {
	mock *MockTransactionSeqStore
}

// NewMockTransactionSeqStore creates a new mock instance
func NewMockTransactionSeqStore(ctrl *gomock.Controller) *MockTransactionSeqStore {
	mock := &MockTransactionSeqStore{ctrl: ctrl}
	mock.recorder = &MockTransactionSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionSeqStore) EXPECT() *MockTransactionSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockTransactionSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockTransactionSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionSeqStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockTransactionSeqStore) FindByHeight(arg0 int64) ([]model.TransactionSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.TransactionSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockTransactionSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockTransactionSeqStore)(nil).FindByHeight), arg0)
}

// MockValidatorAggStore is a mock of ValidatorAggStore interface
type MockValidatorAggStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorAggStoreMockRecorder
}

// MockValidatorAggStoreMockRecorder is the mock recorder for MockValidatorAggStore
type MockValidatorAggStoreMockRecorder struct {
	mock *MockValidatorAggStore
}

// NewMockValidatorAggStore creates a new mock instance
func NewMockValidatorAggStore(ctrl *gomock.Controller) *MockValidatorAggStore {
	mock := &MockValidatorAggStore{ctrl: ctrl}
	mock.recorder = &MockValidatorAggStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorAggStore) EXPECT() *MockValidatorAggStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorAggStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorAggStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorAggStore)(nil).Create), arg0)
}

// FindByEntityUID mocks base method
func (m *MockValidatorAggStore) FindByEntityUID(arg0 string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEntityUID", arg0)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEntityUID indicates an expected call of FindByEntityUID
func (mr *MockValidatorAggStoreMockRecorder) FindByEntityUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEntityUID", reflect.TypeOf((*MockValidatorAggStore)(nil).FindByEntityUID), arg0)
}

// Save mocks base method
func (m *MockValidatorAggStore) Save(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockValidatorAggStoreMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockValidatorAggStore)(nil).Save), arg0)
}

// MockValidatorSeqStore is a mock of ValidatorSeqStore interface
type MockValidatorSeqStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorSeqStoreMockRecorder
}

// MockValidatorSeqStoreMockRecorder is the mock recorder for MockValidatorSeqStore
type MockValidatorSeqStoreMockRecorder struct {
	mock *MockValidatorSeqStore
}

// NewMockValidatorSeqStore creates a new mock instance
func NewMockValidatorSeqStore(ctrl *gomock.Controller) *MockValidatorSeqStore {
	mock := &MockValidatorSeqStore{ctrl: ctrl}
	mock.recorder = &MockValidatorSeqStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorSeqStore) EXPECT() *MockValidatorSeqStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockValidatorSeqStore) Create(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockValidatorSeqStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockValidatorSeqStore)(nil).Create), arg0)
}

// FindByHeight mocks base method
func (m *MockValidatorSeqStore) FindByHeight(arg0 int64) ([]model.ValidatorSeq, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHeight", arg0)
	ret0, _ := ret[0].([]model.ValidatorSeq)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHeight indicates an expected call of FindByHeight
func (mr *MockValidatorSeqStoreMockRecorder) FindByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHeight", reflect.TypeOf((*MockValidatorSeqStore)(nil).FindByHeight), arg0)
}
