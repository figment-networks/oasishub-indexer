// Code generated by MockGen. DO NOT EDIT.
// Source: aggregator_tasks.go

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	reflect "reflect"

	model "github.com/figment-networks/oasishub-indexer/model"
	gomock "github.com/golang/mock/gomock"
)

// MockaccountAggStore is a mock of accountAggStore interface
type MockaccountAggStore struct {
	ctrl     *gomock.Controller
	recorder *MockaccountAggStoreMockRecorder
}

// MockaccountAggStoreMockRecorder is the mock recorder for MockaccountAggStore
type MockaccountAggStoreMockRecorder struct {
	mock *MockaccountAggStore
}

// NewMockaccountAggStore creates a new mock instance
func NewMockaccountAggStore(ctrl *gomock.Controller) *MockaccountAggStore {
	mock := &MockaccountAggStore{ctrl: ctrl}
	mock.recorder = &MockaccountAggStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockaccountAggStore) EXPECT() *MockaccountAggStoreMockRecorder {
	return m.recorder
}

// FindByPublicKey mocks base method
func (m *MockaccountAggStore) FindByPublicKey(key string) (*model.AccountAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPublicKey", key)
	ret0, _ := ret[0].(*model.AccountAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPublicKey indicates an expected call of FindByPublicKey
func (mr *MockaccountAggStoreMockRecorder) FindByPublicKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPublicKey", reflect.TypeOf((*MockaccountAggStore)(nil).FindByPublicKey), key)
}

// Create mocks base method
func (m *MockaccountAggStore) Create(record interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockaccountAggStoreMockRecorder) Create(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockaccountAggStore)(nil).Create), record)
}

// Save mocks base method
func (m *MockaccountAggStore) Save(record interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockaccountAggStoreMockRecorder) Save(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockaccountAggStore)(nil).Save), record)
}

// MockvalidatorAggCreatorStore is a mock of validatorAggCreatorStore interface
type MockvalidatorAggCreatorStore struct {
	ctrl     *gomock.Controller
	recorder *MockvalidatorAggCreatorStoreMockRecorder
}

// MockvalidatorAggCreatorStoreMockRecorder is the mock recorder for MockvalidatorAggCreatorStore
type MockvalidatorAggCreatorStoreMockRecorder struct {
	mock *MockvalidatorAggCreatorStore
}

// NewMockvalidatorAggCreatorStore creates a new mock instance
func NewMockvalidatorAggCreatorStore(ctrl *gomock.Controller) *MockvalidatorAggCreatorStore {
	mock := &MockvalidatorAggCreatorStore{ctrl: ctrl}
	mock.recorder = &MockvalidatorAggCreatorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockvalidatorAggCreatorStore) EXPECT() *MockvalidatorAggCreatorStoreMockRecorder {
	return m.recorder
}

// FindByEntityUID mocks base method
func (m *MockvalidatorAggCreatorStore) FindByEntityUID(key string) (*model.ValidatorAgg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEntityUID", key)
	ret0, _ := ret[0].(*model.ValidatorAgg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEntityUID indicates an expected call of FindByEntityUID
func (mr *MockvalidatorAggCreatorStoreMockRecorder) FindByEntityUID(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEntityUID", reflect.TypeOf((*MockvalidatorAggCreatorStore)(nil).FindByEntityUID), key)
}

// Create mocks base method
func (m *MockvalidatorAggCreatorStore) Create(record interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockvalidatorAggCreatorStoreMockRecorder) Create(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockvalidatorAggCreatorStore)(nil).Create), record)
}

// Save mocks base method
func (m *MockvalidatorAggCreatorStore) Save(record interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockvalidatorAggCreatorStoreMockRecorder) Save(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockvalidatorAggCreatorStore)(nil).Save), record)
}
