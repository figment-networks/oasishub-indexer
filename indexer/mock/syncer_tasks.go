// Code generated by MockGen. DO NOT EDIT.
// Source: syncer_tasks.go

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	model "github.com/figment-networks/oasishub-indexer/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSyncableStore is a mock of SyncableStore interface
type MockSyncableStore struct {
	ctrl     *gomock.Controller
	recorder *MockSyncableStoreMockRecorder
}

// MockSyncableStoreMockRecorder is the mock recorder for MockSyncableStore
type MockSyncableStoreMockRecorder struct {
	mock *MockSyncableStore
}

// NewMockSyncableStore creates a new mock instance
func NewMockSyncableStore(ctrl *gomock.Controller) *MockSyncableStore {
	mock := &MockSyncableStore{ctrl: ctrl}
	mock.recorder = &MockSyncableStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSyncableStore) EXPECT() *MockSyncableStoreMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method
func (m *MockSyncableStore) CreateOrUpdate(val *model.Syncable) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate
func (mr *MockSyncableStoreMockRecorder) CreateOrUpdate(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockSyncableStore)(nil).CreateOrUpdate), val)
}
