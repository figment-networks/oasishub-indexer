// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package mock_indexer is a generated GoMock package.
package mock_indexer

import (
	model "github.com/figment-networks/oasishub-indexer/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MocksourceStore is a mock of sourceStore interface
type MocksourceStore struct {
	ctrl     *gomock.Controller
	recorder *MocksourceStoreMockRecorder
}

// MocksourceStoreMockRecorder is the mock recorder for MocksourceStore
type MocksourceStoreMockRecorder struct {
	mock *MocksourceStore
}

// NewMocksourceStore creates a new mock instance
func NewMocksourceStore(ctrl *gomock.Controller) *MocksourceStore {
	mock := &MocksourceStore{ctrl: ctrl}
	mock.recorder = &MocksourceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksourceStore) EXPECT() *MocksourceStoreMockRecorder {
	return m.recorder
}

// FindMostRecent mocks base method
func (m *MocksourceStore) FindMostRecent() (*model.Syncable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMostRecent")
	ret0, _ := ret[0].(*model.Syncable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMostRecent indicates an expected call of FindMostRecent
func (mr *MocksourceStoreMockRecorder) FindMostRecent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMostRecent", reflect.TypeOf((*MocksourceStore)(nil).FindMostRecent))
}
