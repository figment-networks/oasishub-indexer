// Code generated by MockGen. DO NOT EDIT.
// Source: state_client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	statepb "github.com/figment-networks/oasis-rpc-proxy/grpc/state/statepb"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStateClient is a mock of StateClient interface
type MockStateClient struct {
	ctrl     *gomock.Controller
	recorder *MockStateClientMockRecorder
}

// MockStateClientMockRecorder is the mock recorder for MockStateClient
type MockStateClientMockRecorder struct {
	mock *MockStateClient
}

// NewMockStateClient creates a new mock instance
func NewMockStateClient(ctrl *gomock.Controller) *MockStateClient {
	mock := &MockStateClient{ctrl: ctrl}
	mock.recorder = &MockStateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStateClient) EXPECT() *MockStateClientMockRecorder {
	return m.recorder
}

// GetByHeight mocks base method
func (m *MockStateClient) GetByHeight(arg0 int64) (*statepb.GetByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHeight", arg0)
	ret0, _ := ret[0].(*statepb.GetByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHeight indicates an expected call of GetByHeight
func (mr *MockStateClientMockRecorder) GetByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHeight", reflect.TypeOf((*MockStateClient)(nil).GetByHeight), arg0)
}

// GetStakingByHeight mocks base method
func (m *MockStateClient) GetStakingByHeight(arg0 int64) (*statepb.GetStakingByHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakingByHeight", arg0)
	ret0, _ := ret[0].(*statepb.GetStakingByHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakingByHeight indicates an expected call of GetStakingByHeight
func (mr *MockStateClientMockRecorder) GetStakingByHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakingByHeight", reflect.TypeOf((*MockStateClient)(nil).GetStakingByHeight), arg0)
}
